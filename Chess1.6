#include <iostream>
#include <string>
//#include <vector>           //Dead Counter //Nope...
#include <windows.h>        //Sound effects!
#include <conio.h>
using namespace std;

static string map[110][32];
static int xMove=4,yMove=6;
static char player='w';
static int selX = 0;
static int selY = 0;
static string note;

void showMap(int x, int y){
    system("cls");
    if(player == 'w')
            map[80][6]="\tWeiß ist dran";
        else
            map[80][6]= "\tSchwarz ist dran";
    string temp="";         //We save in this temp a secuence of the string "map", so it doesnt need to
    for (int i=3;i<30;i++) {   //call print each time a "char" comes, but each time a "string" comes... it faster to print
        for (int j=0;j<110;j++){
            if (i>3){   //So werden wir die farbe von "abc" nicht ändern
                //Change the color of the current position
                if(((i-4)/3>y-2 && (i-5)/3<=y-1) && (j/9>x-2 && (j-1)/9<=x-1)){
                    cout << temp;
                    temp = "";
                    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_RED);
                    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), BACKGROUND_GREEN);
                    cout << map[j][i];
                    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);
                    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY);

                    //Colors the selected Piece
                } else if((x!=0&&y!=0)&&(((i-4)/3>selY-2 && (i-5)/3<=selY-1) && (j/9>selX-2 && (j-1)/9<=selX-1))){
                    //Change the color of the selected position
                    cout << temp;
                    temp = "";
                    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_RED);
                    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), BACKGROUND_BLUE);
                    cout << map[j][i];
                    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0);
                    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY);
                } else if (j < 110){
                    temp = temp + map[j][i];
                    //cout << map[j][i]<<;
                } else{
                    cout << temp;
                    temp = "";
                }
            }else
                cout << map[j][i];
        }
        cout << temp;
        temp = "";
        cout << endl;
    }
    cout << "\t\t" << note;
}
void moveAround(int input){
    char in = char(input);
    if(in=='a' || in =='K') //KMHP ist eine schnelle lösung um die Pfeile zu nutzen
        xMove--;
    if(in=='d' || in =='M')
        xMove++;
    if(in=='w' || in =='H')
        yMove--;
    if(in=='s' || in =='P')
        yMove++;
    if(xMove < 1)
        xMove = 8;
    if(xMove > 8)
        xMove = 1;
    if(yMove < 1)
        yMove = 8;
    if(yMove > 8)
        yMove = 1;
    showMap(xMove,yMove);
}
string xyToPiece(int xInp, int yInp){
    return map[(xInp*9)-5][(yInp*3)+3]+map[(xInp*9)-4][(yInp*3)+3];
}
void schachMatt(){
    double x=0.2;
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t▒▓▒░        Schachmatt!          ▒▓▒░";system("color d7");Beep (196,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t▓▒░▒        Schachmatt!          ▓▒░▒";system("color ae");Beep (262,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t▒▓▒░        Schachmatt!          ▒▓▒░";system("color d7");Beep (330,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t░▒▓▒        Schachmatt!          ░▒▓▒";system("color ae");Beep (392,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t▒░▒▓        Schachmatt!          ▒░▒▓";system("color d7");Beep (523,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t░▒▓▒        Schachmatt!          ░▒▓▒";system("color ae");Beep (660,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t▒▓▒░        Schachmatt!          ▒▓▒░";system("color d7");Beep (784,300);Sleep(575*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t▓▒░▒        Schachmatt!          ▓▒░▒";system("color ae");Beep (660,300);Sleep(535*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t▒▓▒░        Schachmatt!          ▒▓▒░";system("color d7");Beep (207,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t░▒▓▒        Schachmatt!          ░▒▓▒";system("color ae");Beep (262,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t▒░▒▓        Schachmatt!          ▒░▒▓";system("color d7");Beep (311,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t░▒▓▒        Schachmatt!          ░▒▓▒";system("color ae");Beep (415,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t▒▓▒░        Schachmatt!          ▒▓▒░";system("color d7");Beep (523,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t▓▒░▒        Schachmatt!          ▓▒░▒";system("color ae");Beep (622,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t▒▓▒░        Schachmatt!          ▒▓▒░";system("color d7");Beep (830,300);Sleep(575*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t░▒▓▒        Schachmatt!          ░▒▓▒";system("color ae");Beep (622,300);Sleep(575*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t▒░▒▓        Schachmatt!          ▒░▒▓";system("color d7");Beep (233,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t░▒▓▒        Schachmatt!          ░▒▓▒";system("color ae");Beep (294,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t▒▓▒░        Schachmatt!          ▒▓▒░";system("color d7");Beep (349,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t▓▒░▒        Schachmatt!          ▓▒░▒";system("color ae");Beep (466,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t▒▓▒░        Schachmatt!          ▒▓▒░";system("color d7");Beep (587,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t░▒▓▒        Schachmatt!          ░▒▓▒";system("color ae");Beep (698,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t▒░▒▓        Schachmatt!          ▒░▒▓";system("color d7");Beep (932,300);Sleep(575*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t░▒▓▒        Schachmatt!          ░▒▓▒";system("color ae");Beep (932,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t▒▓▒░        Schachmatt!          ▒▓▒░";system("color d7");Beep (932,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t▓▒░▒        Schachmatt!          ▓▒░▒";system("color ae");Beep (932,100);Sleep(125*x);system("cls");
    cout<< "\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t▒▓▒░        Schachmatt!          ▒▓▒░";system("color d7");Beep (1046,575);system("cls");
    player = 'd';
}
string selectPlayerFrom(){
    string choosenPla;
    int c;
    bool legal=true;
    do{

        do{
            c = getch();
            system("cls");
            moveAround(c);
        } while (c!=13 && c!=32); //13 = enter    //When it press Enter, the last XY position are in xMove and yMove
        if(xyToPiece(xMove,yMove)[1] == ' '){
            legal = false;
            note = "Du bist kein Luftnomad!";
        }
        else if(xyToPiece(xMove,yMove)[0]!=player){
            legal=false;
            note = "Du bist nicht dran!";
        } else
            legal = true;
    }while(legal == false);
    selX=xMove;
    selY=yMove;
}
void selectPlayerTo(int x, int y){
    string choosenPla;
    int c;
    bool legal;
    do{
        legal = true;
        do{

            c = getch();
            system("cls");
            moveAround(c);
        } while (c!=13 && c!=32); //13 = enter    //When it press Enter, the last XY position are in xMove and yMove
        //  showMap(xMove,yMove);
        choosenPla = xyToPiece(x,y);

        if (selX == xMove && selY == yMove){
            selX = 0; selY = 0;
            if (player=='w')
                player = 's';
            else
                player = 'w';
            note = "Player unselected";
        } else if (xyToPiece(xMove,yMove)[0] == player){
            note = "Versuche nicht dein Team zu töten...";
            legal = false;
        } else if (xyToPiece(xMove,yMove)[1]=='K'){
            schachMatt();
        }
    } while (legal==false);

    map [(x*9)-5][(y*3)+3] = " ";
    map [(x*9)-4][(y*3)+3] = " ";
    map [(xMove*9)-5][(yMove*3)+3] = choosenPla[0];
    map [(xMove*9)-4][(yMove*3)+3] = choosenPla[1];
}
void createMap(){  //Create "game field"
    int count = 8;
    char count2 = 'a';

    //Create the map!

    for (int i = 5; i <=9*8; i++){             //Shows the "abc" that appears on top
        if (i % 9 != 0)                        //i beggins with 5, so at the start we will have only
            map[i][3]=" ";                 //4 blank spaces, not 8.
        else
            map[i][3]=count2++;
    }

    for (int i = 5; i<29;i+=3){                //Shows the "123" that appears on one
        map[74][i] = to_string(count);     //Side of the map
        count--;
    }


    //Creates the "Grid"
    for (int i = 4;i <29;i++){
        for (int j = 0;j<73;j++){
            if (j%9==0&&(i-4)%3==0){
                map[j][i] = "╬";
            } else if (j%9==0&&(i-4)%3!=0){
                map[j][i] = "║";
            } else if ((i-4)%3==0){
                map[j][i] = "═";
            } else
                map[j][i] = " ";
        }
    }

    //Figuren!
    //string testMap[110j][32i];
    count = 0;
    string figuren ="TSLDKLST";
    for (int i = 4; i < 28; i++){
        for (int j = 0; j < 70; j++){
            if (j%9==0){
                if ((i == 6 || i == 27)){
                    map[j+5][i]=figuren[count++]; //Hier kommt TSLDKLST
                }

                //Bauern
                if ((i==9)||(i==24)){
                    map[j+5][i]="B";
                }

                //Weiß oder Schwarz?
                if (i==6||i==9)
                    map[j+4][i]="s";
                else if (i==27||i==24)
                    map[j+4][i]="w";
            }
        }
        count = 0;
    }
}
int main() {

    system("@chcp 65001");
    createMap();
    showMap(xMove,yMove); //Shows the map at start
    do{
        //Movements
        bool legal = true;
        do{
            selectPlayerFrom();
            string choosenPla = xyToPiece(xMove,yMove);
            note = "\n The choosen Player is: " + choosenPla;

        }while (legal == false);
        selectPlayerTo(xMove,yMove);
        if(player=='d')
            return 0;
        selX=0;selY=0;
        showMap(xMove,yMove);

        if(player == 'w')
            player = 's';
        else
            player = 'w';


        /// Implementa nuevamente el contador de muertes!
        //        //-------------------------------------------------------------------------
        //        //Some Other funktionalitäten

        //        //Dead counter
        //        if (testMap[nach][nach1] != "  ")
        //            deads.push_back(testMap[nach][nach1]);

        //        //Revive a Friend
        //        if (((testMap[von][von1][1]=='B') &&  (deads.size()!=0)) && ((nach==0)||(nach==7))){      //Bugs: it doesnt recognize nach1==0 ...
        //            cout << "Who you want to revive?";                     //Ein Bauer kann nach hintern gehen und es würde auch legal
        //            string input;
        //            cin >> input;
        //            for (unsigned int i =0;i < deads.size(); i++){
        //                if (input == deads[i]){
        //                    testMap[von][von1] = deads[i];
        //                    deads[i].erase();
        //                }
        //            }
        //        }
    }while(true);
}
